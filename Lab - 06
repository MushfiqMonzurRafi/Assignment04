#Task - 01

N, M = map(int, input().split())
 
graph = [[] for _ in range(N + 1)]
in_degree = [0] * (N + 1)
 
for _ in range(M):
    A, B = map(int, input().split())
    graph[A].append(B)
    in_degree[B] += 1
 
queue = []
for i in range(1, N + 1):
    if in_degree[i] == 0:
        queue.append(i)
 
result = []
head = 0
while head < len(queue):
    node = queue[head]
    head += 1
    result.append(node)
    for i in graph[node]:
        in_degree[i] -= 1
        if in_degree[i] == 0:
            queue.append(i)
 
if len(result) == N:
    print(' '.join(map(str, result)))
else:
    print(-1)

#Task - 02

N, M = map(int, input().split())
 
graph = [[] for _ in range(N + 1)]
for _ in range(M):
    u, v = map(int, input().split())
    graph[u].append(v)
    graph[v].append(u)
 
color = [-1] * (N + 1)
result = 0
 
for i in range(1, N + 1):
    if color[i] == -1:
        queue = [i]
        color[i] = 0
        count = [1, 0]  
        head = 0
        is_bipartite = True
 
        while head < len(queue):
            node = queue[head]
            head += 1
            for i in graph[node]:
                if color[i] == -1:
                    color[i] = 1 - color[node]
                    count[color[i]] += 1
                    queue.append(i)
                elif color[i] == color[node]:
                    is_bipartite = False
 
        if is_bipartite:
            result += max(count[0], count[1])
        else:
            pass
 
print(result)

#Task - 03

from collections import deque
 
def in_bounds(x, y, n):
    return 0 <= x < n and 0 <= y < n
 
def bfs_meeting_point(n, x1, y1, x2, y2, directions):
    visited_start = [[-1] * n for _ in range(n)]
    visited_end = [[-1] * n for _ in range(n)]
    
    q_start = deque([(x1, y1)])
    q_end = deque([(x2, y2)])
 
    visited_start[x1][y1] = 0
    visited_end[x2][y2] = 0
    
    while q_start and q_end:
        # Process the start queue (from x1, y1)
        for _ in range(len(q_start)):
            x, y = q_start.popleft()
            for dx, dy in directions:
                nx, ny = x + dx, y + dy
                if in_bounds(nx, ny, n) and visited_start[nx][ny] == -1:
                    visited_start[nx][ny] = visited_start[x][y] + 1
                    q_start.append((nx, ny))
                    if visited_end[nx][ny] != -1:
                        return visited_start[nx][ny] + visited_end[nx][ny]

        for _ in range(len(q_end)):
            x, y = q_end.popleft()
            for dx, dy in directions:
                nx, ny = x + dx, y + dy
                if in_bounds(nx, ny, n) and visited_end[nx][ny] == -1:
                    visited_end[nx][ny] = visited_end[x][y] + 1
                    q_end.append((nx, ny))
                    if visited_start[nx][ny] != -1:
                        return visited_start[nx][ny] + visited_end[nx][ny]
 
    return -1
 
n = int(input())
x1, y1, x2, y2 = map(int, input().split())
x1, y1, x2, y2 = x1 - 1, y1 - 1, x2 - 1, y2 - 1
 
if (x1, y1) == (x2, y2):
    print(0)
else:
    directions = [(2, 1), (1, 2), (1, -2), (-1, 2), (-2, 1), (-2, -1), (-1, -2), (2, -1)]
    print(bfs_meeting_point(n, x1, y1, x2, y2, directions))

#Task - 04

N, R = map(int, input().split())
 
tree = [[] for _ in range(N + 1)]
for _ in range(N - 1):
    u, v = map(int, input().split())
    tree[u].append(v)
    tree[v].append(u)
 
subtree_size = [0] * (N + 1)
visited = [False] * (N + 1)
 
stack = [(R, -1)] 
order = []        
 
while stack:
    node, parent = stack.pop()
    order.append((node, parent))
    for neighbor in tree[node]:
        if neighbor != parent:
            stack.append((neighbor, node))
 
for node, parent in reversed(order):
    subtree_size[node] = 1 
    for neighbor in tree[node]:
        if neighbor != parent:
            subtree_size[node] += subtree_size[neighbor]
 
Q = int(input())
for _ in range(Q):
    X = int(input())
    print(subtree_size[X])

#Task - 05

from collections import deque
 
def find_farthest_node(src, adj_l):
    global max_dist
    global max_dist_node
    max_dist = 0
    max_dist_node = src
 
    def bfs():
        global max_dist
        global max_dist_node
        visited = [False] * len(adj_l)
        dist = [0] * len(adj_l)
        q = deque([src])
        visited[src] = True
 
        while q:
            node = q.popleft()
            for neighbor in adj_l[node]:
                if not visited[neighbor]:
                    visited[neighbor] = True
                    dist[neighbor] = dist[node] + 1
                    q.append(neighbor)
                    if dist[neighbor] > max_dist:
                        max_dist = dist[neighbor]
                        max_dist_node = neighbor
 
    bfs()
    return max_dist_node, max_dist
 
 
def main():
    n = int(input())
    adj_l = [[] for _ in range(n)]
    for _ in range(n - 1):
        u, v = map(int, input().split())
        adj_l[u - 1].append(v - 1)
        adj_l[v - 1].append(u - 1)
 
    f, _ = find_farthest_node(0, adj_l)
    g, dist = find_farthest_node(f, adj_l)
 
    print(dist)
    print(f + 1, g + 1)
 
if __name__ == "__main__":
    main()

#task - 06

import heapq
 
def topological_sort(words):
    ALPHABET_SIZE = 26
    graph = [set() for _ in range(ALPHABET_SIZE)]
    in_degree = [0] * ALPHABET_SIZE
    used = [False] * ALPHABET_SIZE
 
    def char_to_index(c):
        return ord(c) - ord('a')
 
    def index_to_char(i):
        return chr(i + ord('a'))
 
    def add_edge(u_char, v_char):
        u = char_to_index(u_char)
        v = char_to_index(v_char)
        if v not in graph[u]:
            graph[u].add(v)
            in_degree[v] += 1
 
    for word in words:
        for ch in word:
            used[char_to_index(ch)] = True
 
    for i in range(len(words) - 1):
        w1, w2 = words[i], words[i + 1]
        min_len = min(len(w1), len(w2))
        found_difference = False
        for j in range(min_len):
            if w1[j] != w2[j]:
                add_edge(w1[j], w2[j])
                found_difference = True
                break
        if not found_difference and len(w1) > len(w2):
            return "-1"  
 
    heap = [i for i in range(ALPHABET_SIZE) if in_degree[i] == 0 and used[i]]
    heapq.heapify(heap)
 
    result = []
    while heap:
        u = heapq.heappop(heap)
        result.append(index_to_char(u))
        for v in sorted(graph[u]):
            in_degree[v] -= 1
            if in_degree[v] == 0:
                heapq.heappush(heap, v)
 
    if len(result) != sum(used):
        return "-1"  
 
    return ''.join(result)
 
n = int(input())
words = [input().strip() for _ in range(n)]
 
print(topological_sort(words))
